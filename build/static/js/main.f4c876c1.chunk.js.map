{"version":3,"sources":["componets/layout/Header.js","componets/PersonContext.js","componets/PersonProfile.js","componets/utils/API.js","componets/Search.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","subStyle","textDecoration","Header","style","PersonContext","createContext","users","profileStyle","borderBottom","PersonProfile","useContext","class","scope","map","item","formatDate","Date","dob","date","toLocaleDateString","src","picture","thumbnail","name","first","last","email","phone","axios","get","Search","props","className","type","placeholder","App","useState","apiResponse","setApiResponse","search","useEffect","API","then","response","data","results","onChange","event","preventDefault","input","target","value","console","log","employees","filter","employee","indexOf","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mNAWA,IAAMA,EAAa,CACfC,WAAY,UAEZC,MAAO,OACPC,UAAW,SACXC,QAAS,QAGPC,EAAW,CACbH,MAAO,OACPI,eAAgB,QAELC,EArBf,WACI,OACI,4BAAQC,MAAOR,GACX,kDACA,uBAAGQ,MAAQH,GAAX,wDCFGI,EAFOC,wBAAc,CAAEC,MAAO,KCkDvCC,EAAe,CACjBX,WAAY,UACZG,QAAS,OACTS,aAAc,mBAGHC,EA/CO,WAAO,IAEjBH,EAAUI,qBAAWN,GAArBE,MAEA,OAEA,yBAAKH,MAAOI,GACR,2BAAOI,MAAM,uBACL,+BACI,4BACI,wBAAIC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGfN,EAAMO,KAAI,SAACC,GACR,IAEMC,EAFO,IAAIC,KAAKF,EAAKG,IAAIC,MAEPC,qBAExB,OACI,+BACI,4BACI,gCAAK,yBAAKC,IAAKN,EAAKO,QAAQC,aAC5B,4BAAKR,EAAKS,KAAKC,MAAf,IAAuBV,EAAKS,KAAKE,MACjC,4BAAKX,EAAKY,OACV,4BAAKZ,EAAKa,OACV,4BAAKZ,W,iBCtCtB,EAED,WACN,OAAOa,IAAMC,IAAI,iDCYVC,MAff,SAAgBC,GACZ,OACI,0BAAMC,UAAU,UACZ,yBAAKA,UAAU,cACX,yCAAOA,UAAU,eACbC,KAAK,OACLC,YAAY,aACRH,O,MCyCTI,MA1Cf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAwBb,OAxBa,KAIbC,qBAAU,WACRC,IAAeC,MAAK,SAACC,GACnBL,EAAeK,EAASC,KAAKC,cAE9B,CAACN,IAkBF,yBAAKP,UAAU,OACb,yBAAKA,UAAU,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQT,KAAK,SAASuB,SAnBA,SAAAC,GACxBA,EAAMC,iBACN,IAAMC,EAAQF,EAAMG,OAAOC,MAC3BC,QAAQC,IAAIJ,GACZ,IAAMK,EAAYjB,EAAYkB,QAAO,SAAAC,GAElC,OAAOA,EAASjC,KAAKC,MAAMiC,QAAQR,IAAU,GAC7CO,EAASjC,KAAKE,KAAKgC,QAAQR,IAAU,KAExCX,EAAegB,GAEfF,QAAQC,IAAIC,IAQyCT,QAASR,IAE5D,kBAAC,EAAcqB,SAAf,CAAwBP,MAAS,CAAC7C,MAAO+B,IACzC,kBAAC,EAAD,UC5BcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.f4c876c1.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>Employee Directory</h1>\n            <p style={ subStyle }>Search for an Employee by First or Last name below</p>\n        </header>\n    )\n}\n\nconst headerStyle ={\n    background: '#AC8DAF',\n    //borderBottom: '#092532',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst subStyle = {\n    color: '#fff',\n    textDecoration: 'none'\n}\nexport default Header;\n","import React, { createContext } from 'react';\n\nconst PersonContext = createContext({ users: [] });\n\nexport default PersonContext;","import React, { useContext } from 'react';\nimport PersonContext from './PersonContext';\n\n\n// const filterName = () => {\n//     return(\n\n//     )\n// }\n\n\nconst PersonProfile = () => {\n\n    const { users } = useContext(PersonContext);\n  \n            return (\n                \n            <div style={profileStyle}>\n                <table class=\"table table-striped\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Image</th>\n                                <th scope=\"col\">Name</th>\n                                <th scope=\"col\">Email</th>\n                                <th scope=\"col\">Phone</th>\n                                <th scope=\"col\">DOB</th>\n                            </tr>\n                        </thead>\n                {users.map((item) => {\n                    const date = new Date(item.dob.date);\n                     \n                    const formatDate = date.toLocaleDateString();\n                    //console.log(date.toLocaleDateString())\n                    return(\n                        <tbody>\n                            <tr>\n                                <th> <img src={item.picture.thumbnail}></img></th>\n                                <td>{item.name.first} {item.name.last}</td>\n                                <td>{item.email}</td>\n                                <td>{item.phone}</td>\n                                <td>{formatDate}</td>\n                            </tr>\n                        </tbody>\n                                           \n                    )\n                })}\n                </table>\n            </div>\n    \n            )\n}\n\nconst profileStyle = {\n    background: '#f4f4f4',\n    padding: '10px',\n    borderBottom: '1px #ccc dotted',\n}\n\nexport default PersonProfile;\n","import axios from 'axios';\n\nexport default {\n    //Get all employees\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?results=50&nat=us\");\n    },\n}","import React from 'react'\n\nfunction Search(props) {\n    return(\n        <form className=\"search\">\n            <div className=\"form-group\">\n                <input className=\"form-control\" \n                    type=\"text\"\n                    placeholder=\"Search...\"\n                    {...props}\n                    ></input>\n\n            </div>\n        </form>\n    )\n}\n\nexport default Search;\n","import React, { useState, useEffect } from 'react';\nimport Header from './componets/layout/Header';\nimport PersonContext from './componets/PersonContext';\nimport PersonProfile from './componets/PersonProfile';\nimport API from './componets/utils/API';\nimport Search from './componets/Search';\nimport './App.css';\n\nfunction App() {\n  const [apiResponse, setApiResponse] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    API.getUsers().then((response) => {\n      setApiResponse(response.data.results)\n    })\n  }, [search])\n\n  const handleInputChange = event => {\n    event.preventDefault();\n    const input = event.target.value;\n    console.log(input)\n    const employees = apiResponse.filter(employee => {\n      //return employee.name.first;\n       return employee.name.first.indexOf(input) > -1 || \n       employee.name.last.indexOf(input) > -1\n    })\n    setApiResponse(employees);\n  \n    console.log(employees)\n  }\n  \n  return (\n    \n    <div className=\"App\">\n      <div className=\"container\">\n      <Header />\n      <Search name=\"Search\" onChange={handleInputChange} results={apiResponse}/>\n      \n      <PersonContext.Provider value = {{users: apiResponse}}>\n      <PersonProfile />\n      </PersonContext.Provider>\n\n    </div>\n    </div>\n        \n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}